---
title: Troubleshooting
owner: London Services
---

This topic provides operators with basic instructions for troubleshooting on-demand RabbitMQ&reg; for PCF.


## <a id="errors"></a> Errors

This section lists errors that you might see associated with on-demand RabbitMQ for PCF.

### <a id="create-errors"></a> Instance Creation

This section describes errors that may occur when a developer runs `cf create-service` to create an instance of the on-demand RabbitMQ for PCF service.

To properly debug the error, you need the original error message.

#### <a id="about-create-errors"></a> About Instance Creation

The diagram below shows the sequence of component requests and actions that create the instance:

<div class="mermaid">  
sequenceDiagram
  User->> Cloud Controller: cf create service
  Cloud Controller->> On Demand Broker: provision instance
  On Demand Broker->>Service Adapter: generate manifest
  Service Adapter->>On Demand Broker: a deployment manifest
  On Demand Broker->>BOSH: bosh deploy with manifest
  BOSH->>On Demand Broker: deploying
  On Demand Broker->>Cloud Controller: accepted
  loop Until bosh task state is 'done'
    Cloud Controller->>On Demand Broker:last operation
    On Demand Broker->>BOSH:get task state
    BOSH->>On Demand Broker:queued/processing
    On Demand Broker->>Cloud Controller:in progress
  end
  Cloud Controller->>On Demand Broker:last operation
  On Demand Broker->>BOSH:get task state
  BOSH->>On Demand Broker:done
  On Demand Broker->>Cloud Controller:completed
</div>

Error with on-demand instance creation can be either _synchronous_ or _asynchronous_:

* **Synchronous** failures occur before BOSH creates the deployment manifest for the new instance VM. 
Synchronous errors happen fast and early in the instance-creation process, and the Cloud Controller 
deletes the unsuccessful instance from its accounting of service instances and bindings.
* **Asynchronous** failures occur after BOSH tries to deploy the new service instance. 
In these cases, the Cloud Controller may retain references to the orphan instance.

### <a id="manage-errors"></a> Instance Management

#### <a id="update"></a> Instance Update Failure

Update workflows

Application developer reports that they could not update an instance

#### <a id="bind"></a> Instance Bind Failure

Bind workflows

Application developer reports that they could not bind a service to an instance

#### <a id="unbind"></a> Instance Unbind Failure

Unbind workflows

Application developer reports that they could not unbind a service to an instance

#### <a id="delete"></a> Instance Delete Failure

Delete workflows 

Application developer reports that they could not delete a service instance

### <a id="bosh-adapter"></a> BOSH or Service Adapter

<table border='1' class='nice'>
<tr>
  <th width="22%">Error</th>
  <td><p><code>Instance provisioning failed: There was a problem completing your request. 
               Please contact your operations team providing the following information: <br>
               service: RABBITMQ-SERVICE-NAME, service-instance-guid: SERVICE-INSTANCE-GUID, broker-request-id: 
               REQUEST-GUID, task-id: TASK-ID, operation: create</code></p>
  <p>The GUID identifiers are long alphanumeric strings. TASK-ID is a number. If TASK-ID is blank, see <a href="#network">UAA, Network, or Connection Issue</a></p>
 </td>
</tr>
<tr>
  <th>Possible Causes</th>
  <td>
    <ul>
    <li>BOSH failure</li>
    <li>Service Adapter failure</li>
    </ul>
  </td>
</tr>
<tr>
  <th>Solution</th>
  <td>
    <ol>
      <li>Note the <code>SERVICE-INSTANCE-GUID</code>, <code>REQUEST-GUID</code>, and <code>TASK-ID</code> values from the error text.</li>
      <li>Check the BOSH task information
        <ol>
           <li>Follow the directions to <a href="#log-into-bosh">Log into BOSH</a>.</li>
        <li>Run <code>bosh task TASK-ID --debug</code> to see an error report.</li>
        <li>Run <code>bosh download manifest SERVICE-INSTANCE-GUID</code> to download the instance deploy manifest, if it was created.</li>
        <li>Run <code>bosh vms SERVICE-INSTANCE-GUID</code> to list the vms deployed by the service instance, if any.</li></ol>
      <li>If the BOSH error indicates a problem with the deployment manifest:</li>
        <ol><li>Access the broker logs
          <ul><li>Use a syslog logging platform if you have one <a href="#set-up-logging">set up.</a></li>
          <li>Otherwise run <code>bosh logs broker 0</code>.</li></ul></li>
        <li>If you have more than one instance of the broker, collect logs from each broker.</li>
        <li>Search the broker logs for <code>REQUEST-GUID</code> to obtain more information.</li>
        <li>Contact Pivotal support with this information.</li></ol>
      <li>If the BOSH error does not indicate a problem with the manifest go to TK</li>
    </li>
    </ol>
   </td>
</tr>
</table>

### <a id="network"></a> Network or Connection

<table border='1' class='nice'>
<tr>
  <th width="22%">Error</th>
  <td><ul><li><code>Instance provisioning failed: There was a problem completing your request. Please contact your operations team providing the following information: <br>
  service: RABBITMQ-SERVICE-NAME, service-instance-guid: SERVICE-INSTANCE-GUID, broker-request-id: REQUEST-GUID, task-id: , operation: create</code></li>
  <li>Any error that is missing a <code>TASK-ID</code> number after <code>task-id: </code></li>
 </td>
</tr>
<tr>
  <th>Possible Causes</th>
  <td>
    <ul>
    <li>Problem accessing BOSH UAA</li>
    <li>Problem accessing BOSH Director</li>
    <li>The network fails to deliver messages between the Cloud Controller, On-Demand Broker, Service Adapter, and BOSH.</li>
    </ul>
  </td>
</tr>
<tr>
  <th>Solution</th>
  <td>
    <p>TK HOW TO CHECK ACCESS / CONNECTIVITY TO BOSH</p>
    <p>If the BOSH deployment was never created, a synchronous error, run`cf delete service RABBITMQ-SERVICE-NAME` clean up the orphan instance in the Cloud Controller.</p>
  </td>
</tr>
</table>

### <a id="network-kal"></a> Networking

Common issues include:

1. Network latency issues when connecting to the service instance to create or delete a binding. Solution is to try again or improve network performance

1. Network firewall rules are blocking connections from the service broker to the service instance. In OpsManager go into the tile and see the two networks that are configured in the networks tab. Ensure that these networks allow access to each other.

To validate you can `bosh ssh` onto the service broker by first downloading the broker manifest and targeting the deployment, and try to reach the service instance. If no BOSH task-id is in the error message (same error as above, but blank after task-id: ) then look in the broker log using the broker-request-id from the task.

There could be a problem accessing BOSH’s UAA or the BOSH director
Follow network troubleshooting and check BOSH director is online

Network broker is being deployed to is cannot reach the BOSH director

Network broker is being deployed to can’t reach CF

Register broker fails

Tile is being reinstalled and was not correctly uninstalled [existing issue for all tiles]

Smoke test failed

CF cannot reach the service broker

CF cannot reach the service instances

service network cannot access the BOSH director

### <a id="uaa"></a> Authentication

Certificate issues - ODB requires valid certificates 

### <a id="quota"></a> Quota

#### <a id="plan-quota"></a> Service Plan Quota Exceeded

<table border='1' class='nice'>
<tr>
  <th width="22%">Error</th>
  <td><p><code>Service broker error: The quota for this service plan has been exceeded. Please contact your Operator for help.</code></p>
 </td>
</tr>
<tr>
  <th>Cause</th>
  <td>
    The deployed instance count for the service is at its global maximum. This error does not indicate any functional failure; it just tells the developer that no more on-demand RabbitMQ for PCF instances are allowed.
  </td>
</tr>
<tr>
  <th>Solution</th>
  <td>
    <p>To raise the global service plan quota, open the <b>RabbitMQ for PCF</b> tile <b>TK Pane</b> and increase the setting in the <b>TK RabbitMQ Instance Limit</b>field.</p>
    <p>TK Workflow for finding who is using the plan.</p>
    <p>TK Link or workflow for monitoring plan current usage vs quota.</p>
  </td>
</tr>
</table>

#### <a id="plan-quota-kal"></a> Plan Quota issues

If the error is “Service broker error: The quota for this service plan has been exceeded. Please contact your Operator for help.” then

Checking your current plan quota - TODO - write operator facing docs for ODB metrics 

Increase the plan quota

Log into ops manager

Reconfigure the quota on the plan page

Deploy the tile

Finding who is using the plan quota - TODO CF workflow

#### <a id="global-quota"></a> Global Quota Exceeded

<table border='1' class='nice'>
<tr>
  <th width="22%">Error</th>
  <td><p><code>Service broker error: The quota for this service has been exceeded. Please contact your Operator for help.</code></p>
 </td>
</tr>
<tr>
  <th>Cause</th>
  <td>
    The deployed instance count for the service plan is at its maximum. This error does not indicate any functional failure; it just tells the developer that no more on-demand plan instances are allowed.
    <p>TK Workflow for finding who is using the plan.</p>
    <p>TK Link or workflow for monitoring plan current usage vs quota.</p>
  </td>
</tr>
<tr>
  <th>Solution</th>
  <td>
    <p>To raise the global service plan quota, open the <b>RabbitMQ for PCF</b> tile <b>TK Pane</b> and increase the setting in the <b>TK RabbitMQ Instance Limit</b>field.</p>
  </td>
</tr>
</table>

#### <a id="global-quota-kal"></a> Global Quota issues

If the error is “Service broker error: The quota for this service has been exceeded. Please contact your Operator for help.” then
Checking your current global quota - TODO OpsManager workflow

Increase the global quota 

Log into ops manager

Reconfigure the quota on the on-demand settings page

Deploy the tile

Finding who is using the quota - TODO CF workflow

#### <a id="stop"></a> <i>bosh stop</i> Failure

<table border='1' class='nice'>
<tr>
  <th width="22%">Error</th>
  <td><p><code>result: 1 of 1 drain scripts failed. Failed Jobs: rabbitmq-server.</code></p>
 </td>
</tr>
<tr>
  <th>Cause</th>
  <td>
    <p><code>bosh stop rabbitmq-server_JOB_INDEX</code> failure</p>
  </td>
</tr>
<tr>
  <th>Solution</th>
  <td>
    <p>The drain script logs to <code>/var/vcap/sys/log/rabbitmq-server/drain.log</code>. If you have a remote syslog configured, this will appear as the <code>rmq_server_drain</code> program.</p>
    <ol>
      <li>First, <code>bosh ssh</code> into the failing rabbitmq-server instance and start the <code>rabbitmq-server</code> job by running <code>monit start rabbitmq-server</code>).<br>
      You will not be able to start the job via <code>bosh start</code> as this always runs the drain script first and will fail since the drain script is failing.</li>
      <li>Run <code>monit status</code> to confirm that the rabbitmq-server job is running</li>
      <li>Once the rabbitmq-server job is running, run <code>DEBUG=1</code> <code>/var/vcap/jobs/rabbitmq-server/bin/drain</code>. This tells you exactly why it is failing.</li>
    </ol>
  </td>
</tr>
</table>

### <a id="smoke"></a> Smoke Test

If errors occur while the smoke tests run, they will be summarised at the end of the errand log output. Detailed logs can be found where the failure occurs.

When encountering an error when running smoke tests, it can be helpful to search the log for other instances of the error summary printed at the end of the tests, e.g. <code>Failed to target Cloud Foundry</code>.

Look out for <code>TIP: ...</code> in the logs next to any error output for further troubleshooting hints.

### <a id="ipsec-installation-issues"></a> IPsec Installation

<table border='1' class='nice'>
<tr>
  <th width="22%">Error</th>
  <td><p>Unresponsive applications or incomplete responses, particularly for large payloads</p>
 </td>
</tr>
<tr>
  <th>Cause</th>
  <td>
    <p><strong>Packet Loss</strong></p>
    <p>IPsec packet encryption increases the size of packet payloads on host VMs. If the size of the larger packets exceeds the maximum transmission unit (MTU) size of the host VM, packet loss may occur when the VM forwards those packets.</p>
    <p>If your VMs were created with an Amazon PV stemcell, the default MTU value is 1500 for both host VMs and the application containers. If your VMs were created with Amazon HVM stemcells, the default MTU value is 9001. Garden containers default to 1500 MTU.</p>
  </td>
</tr>
<tr>
  <th>Solution</th>
  <td>
    <p>Implement a 100 MTU difference between host VM and the contained application container, using one of the following approaches:</p>
    <ol>
      <li>Decrease the MTU of the application containers to a value lower than the MTU of the VM for that container. In the ERT tile configuration, click <strong>Networking</strong> and modify <strong>Applications Network Maximum Transmission Unit (MTU) (in bytes)</strong> before you deploy. Decrease it from the default value of 1454 to 1354.</li>
      <li>Increase the MTU of the application container VMs to a value greater than 1500. Pivotal recommends a headroom of 100. Run <code>ifconfig NETWORK-INTERFACE mtu MTU-VALUE</code> to make this change. Replace NETWORK-INTERFACE with the network interface used to communicate with other VMs For example: 
      <code>$ ifconfig NETWORK-INTERFACE mtu 1600</code></li>
    </ol>
  </td>
</tr>
</table>

### <a id="install-upgrade"></a> Installation and Upgrade

Deploy fails

### <a id="resources"></a> Resource Sizing

The resource sizes selected for a given plan are less than the service requires to function.

### <a id="config"></a> Configuration

### <a id="service"></a> Service-Specific Issues

### <a id="fail-jobs-instances"></a>Failing Jobs and Unhealthy Instances

An issue with the service deployment

Run `bosh vms --vitals service-instance_$guid`

For additional information run `bosh instances --ps --vitals`

If the VM is failing you will need to follow the service specific information, as any uninstructed remediatory actions (such as running bosh restart on a VM) may cause issues in the service instance.

### <a id="missing-logs-metrics"></a>Missing Logs and Metrics

If no logs are being emitted by the on-demand broker, check that your syslog forwarding address is correct in Ops Manager.

To verify if metrics are being emitted to the firehose:

1. Install the [`cf nozzle` plugin](https://github.com/cloudfoundry/firehose-plugin)

2. Run `cf nozzle -f ValueMetric | grep --line-buffered “on-demand-broker/<service offering name>” `

If no metrics appear within 5 minutes:

Verify that the broker network has access to the Loggregator system, on all required ports. [Contact Pivotal support](#filing-a-support-ticket) if you are unable to resolve the issue. 

### <a id="other-errors"></a> Other Errors

## <a id="techniques"></a> Techniques

This section gives you techniques that you can use to troubleshoot on-demand RabbitMQ for PCF.

### <a id="parse-error"></a> Parse a CF Error Message

If you see an error, record the contents of the **Message** field, which is useful for debugging. Please provide this information to Pivotal Support when filing a [ticket](#ticket).

To retrieve the error's **Message** field after the error occurs, enter `cf service MY-SERVICE` where MY-SERVICE is the service instance name.

If you do not have the service instance name, [retrieve](#instance) it with `cf services`.
    <pre class="terminal">
    $ cf service myservice
    Service instance: myservice
    Service: super-db
    Bound apps:
    Tags:
    Plan: dedicated-vm
    Description: Dedicated Instance
    Documentation url:
    Dashboard: 
    Last Operation
    Status: create failed
    Message: Instance provisioning failed: There was a problem completing your request. 
        Please contact your operations team providing the following information: 
        service: redis-acceptance, 
        service-instance-guid: ae9e232c-0bd5-4684-af27-1b08b0c70089,
        broker-request-id: 63da3a35-24aa-4183-aec6-db8294506bac, 
        task-id: 442, 
        operation: create
    Started: 2017-03-13T10:16:55Z
    Updated: 2017-03-13T10:17:58Z
</pre>

The **Message** field contains the following sub-fields:

  * **service-instance-guid**: identifies the service instance.

  * **task-id**: if present, indicates the BOSH Task ID of the instance creation task. You can retrieve more information about the task by running `bosh task TASK-ID` using the [BOSH CLI](https://bosh.io/docs/bosh-cli.html).

  * **broker-request-guid**: identifies the portion of the On-Demand Broker log that contains the failed step. To debug further, access the broker log via your syslog aggregator, or access BOSH logs for the broker by running `bosh logs broker 0`.  
  If you have more than one broker instance, repeat this process, incrementing the index for each instance from `0` to `1` and so on.

### <a id="log-into-bosh"></a> Log into BOSH 

1. Follow the directions to [SSH into Ops Manager](https://docs.pivotal.io/pivotalcf/customizing/trouble-advanced.html#ssh) in the *Advanced Troubleshooting with the BOSH CLI* topic. Use the following values:
    * **Certificate Location**: Use the file path on your local machine to the key pair used to install Ops Manager.
    * **BOSH Director IP Address**: Retrieve from the Ops Manager Director tile **Status** tab.
    * **BOSH Director Credentials**: Retrieve from the Ops Manager API or find it in the Ops Man Director tile **Credentials** tab > **Director Credentials**.

1. Continue following the *Advanced Troubleshooting* directions to [Log into BOSH](https://docs.pivotal.io/pivotalcf/customizing/trouble-advanced.html#log-in). 

### <a id="check-logs"></a> Check Logs

Once you have the BOSH Task ID and instance GUID, proceed as follows:</p>

1. Run <code>bosh task TASK-ID</code> to show instance creation task errors from BOSH. Possible errors include failure at the IaaS level and hitting your rate limit for the day.

1. If the BOSH task completed successfully, the problem was elsewhere. You can use a logging platform to locate where. If you haven't already, follow the instructions to <a href="#set-up-logging">set up logging</a> to track the progress of your <code>create-service</code>task. Note that RabbitMQ for PCF logs and platform component logs are configured separately.

1. Search for the service instance GUID in the logs generated by <code>cf create-service</code>.

1. Refer to the Create service instance process diagram above to see the order of component actions and messages that successfully create an on-demand service instance. The Cloud Controller component generates the service instance GUID before it sends the first <code>provision instance</code> call to the on-demand broker, and all subsequent messages related to the instance creation task include this GUID.

1. Along with the process diagram, refer to these component identifiers in the logs to determine how far the <code>create-service</code> process went and where it failed:
      <ul><li><code>tk_cloud_controller_xyz</code> - Cloud Controller</li>
      <li><code>tk_odb_xyz</code> - On-Demand Broker</li>
      <li><code>tk_jobs_rabbitmq_server</code> - RabbitMQ for PCF Service Adapter</li>
      <li><code>tk_bosh_xyz</code> - BOSH</li></ul>
    </li></ol>

### <a id="log-into-bosh-kal"></a> Use BOSH and CF to Access Logs

1. Follow the steps described here to [target your BOSH CLI](https://docs.pivotal.io/pivotalcf/customizing/trouble-advanced.html#prepare) and [log-in to your CF CLI](https://docs.pivotal.io/pivotalcf/cf-cli/getting-started.html)

#### <a id="access-broker"></a> Access Broker Logs and VM(s)

1. Identify the ODB deployment usin g `bosh deployments`
1. Download the ODB manifest using `bosh download manifest <odb-deployment-name> odb.yml`
1. Select the ODB deployment using `bosh deployment odb.yml`
1. View VMs in the deployment using `bosh instances`
1. Download broker logs by using the `bosh logs <instance-id>` command

#### <a id="access-instance"></a> Access Service Instance Logs and VM(s)

1. To target an individual service instance deployment, retrieve the 
the guid of your service instance with the CF CLI command `$ cf service {YOUR_SERVICE} --guid`

1. Pre-pend the text "service_instance-" to the guid you just obtained to create the ID that BOSH uses for your service instance (e.g. if your guid is `1Hy6H`), this becomes `service_instance-1Hy6H`).

1. Download your bosh manifest for the service using `$ bosh download manifest service_instance-guid myservice.yml`
1. Select the deployment using `bosh deployment myservice.yml`
1. View VMs in the deployment using `bosh instances`
1. Download broker logs by using the `bosh logs <instance-id>` command
1. To SSH onto the VM use `bosh ssh <instance-id>`

### <a id="determine-task-id"></a> Determine the Task ID of a <i>create-service</i> Task

This procedure determines the Task ID for the BOSH task that creates (or attempts to create) an on-demand service instance, if you only know the the service name. This BOSH task is triggered by the `cf create-service` command.

1. Use the cf CLI to target and to log in to your deployment. See [Login](https://docs.pivotal.io/pivotalcf/cf-cli/getting-started.html#login) the *Getting Started with the cf CLI* topic.
    <pre class="terminal">
    $ cf login -a https<span>://</span>api.example.com -u username<span>@</span>example.com
    API endpoint: https<span>://</span>api.example.com
    </pre>

1. Follow the directions to [Log into BOSH](#log-into-bosh).
    <pre class="terminal">
    $ bosh --ca-cert CERTIFICATE-LOCATON target BOSH-DIRECTOR-IP
    </pre>

1. From the BOSH Director VM, use the BOSH CLI to retrieve the Task ID of the service instance create task.
  - Run `bosh tasks recent` to show all recent tasks
  - Run `bosh tasks recent | grep GUID` with the GUID of your instance.

1. Retrieve the Task ID from the first column of the output.

1. Use the Task ID to show the full BOSH error message.
  - Run `bosh task TASK-ID` to show the full error message
  - Run `bosh task TASK-ID --raw` to show raw JSON for the error

### <a id="determine-guid"></a> Determine the GUID of an Instance

This procedure determines the GUID of a service instance if you only know the service name. It works whether or not the service instance was created successfully. The GUID is useful for debugging.

1. Log into the space containing the instance or failed instance. 
    <pre class="terminal">
    $ cf login
    </pre>

1. If you do not know the name of the service instance:
  1. Run `cf services` to see all instances in the space.
  1. Find the service instance name listed in the `name` column.
    <pre class="terminal">
    $ cf services
    Getting services in org my-org / space my-space as user<span>@</span>example.com...
    OK
    name          service            plan    bound apps    last operation
    my-instance   ondemand-rabbitmq  Solo                  create succeeded
    </pre>

1. Run `cf service SERVICE-INSTANCE-NAME --guid` to retrieve the GUID of the instance.

### <a id="set-up-logging"></a> Set Up Logging

This procedure sets up logging for RabbitMQ for PCF, to send log messages from RabbitMQ for PCF service components to a logging platform.

1. If you haven't already, set up an account with a <a href="https://docs.pivotal.io/pivotalcf/devguide/services/log-management-thirdparty-svc.html">logging service</a>.

1. In Ops Manager, click into the **RabbitMQ for PCF** tile.

1. In the **Settings** tab > **Syslog** pane enter the following:
  * For **Syslog address**, enter the address of your logging service endpoint
  * For **Syslog port**, enter the port number of your logging service endpoint

1. Click **Save**.

1. In the **Installation Dashboard**, click **Apply Changes**.

This setup only forwards logs from RabbitMQ for PCF components, not from platform components like the Cloud Controller. To forward platform component logs, open the Elastic Runtime tile **Syslog** pane and configure your logging endpoint address and port number as the **Syslog address** and **Syslog port** fields.

### <a id="stop"></a> Stop RabbitMQ

This procedure safely stops RabbitMQ. You may need to do this when debugging, on your own or working with GSS.

`bosh stop rabbitmq-server`

There are BOSH job lifecycle hooks which are only fired when rabbitmq-server is
stopped through BOSH. This will cleanly stop the RabbitMQ service and is the only supported method of stopping the service.

**DO NOT STOP RABBITMQ VIA MONIT**

Do not log into the virtual machine running the RabbitMQ service and stop the RabbitMQ service via monit. It is a potentially dangerous operation as it will kill the RabbitMQ service immediately.

#### What happens when I run bosh stop rabbitmq-server?

BOSH starts the shutdown sequence from the bootstrap instance.

We start by telling the RabbitMQ application to shutdown and then shutdown the
Erlang VM within which it is running. If this succeeds, we run the following
checks to ensure that the RabbitMQ application and Erlang VM have stopped:

1. If `/var/vcap/sys/run/rabbitmq-server/pid` exists, check that the PID inside
this file does not point to a running Erlang VM process. Notice that we are
tracking the Erlang PID and not the RabbitMQ PID.
1. Check that `rabbitmqctl` does not return an Erlang VM PID

Once this completes on the bootstrap instance, BOSH will continue the same
sequence on the next instance. All remaining rabbitmq-server instances will be
stopped one by one.

### <a id="orphan-instances"></a>Remove an Orphaned Instance

you can remove the deployment from BOSH and CF directly

`cf service --guid` 

Record this guid

`bosh delete deployment service-instance_$guid`

If this fails:

`bosh delete deployment service-instance_$guid --force`

This will ignore any errors while deleting

WARNING - this may leave IaaS resources

Next purge the service instance in CF

`cf purge-service-instance myservice`

### <a id="errands"></a> Smoke Tests, Checks, and Errands

### <a id="saturation-scaling-1"></a> View Resource Saturation and Scaling Resources

Once a deployment has been selected, you can use the `bosh vms --vitals` or the `bosh instances --vitals` commands to view current resource utilization. You can also view process level information by using `bosh instances --ps`.

### <a id="saturation-scaling-2"></a> Monitor Quota Saturation and Number of Service Instances

## <a id="kb"></a> Knowledge Base

For help from the PCF community, consult the [Pivotal Knowledge Base](http://discuss.pivotal.io).

## <a id="ticket"></a> File a Support Ticket

For help from Pivotal Support, file a [support ticket](https://support.pivotal.io/).

Please provide the following if possible, to help expedite troubleshooting:

* The [error message](#parsing-a-cf-error-message) from `cf service SERVICE-INSTANCE-NAME`
* Your [service broker logs](#access-broker)
* Your [service instance logs](#access-instance)

